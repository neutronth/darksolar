///
/// example script of cmdopt.js
///

"use strict";

var cmdopt = require('cmdopt');


function MainApp() {
};

(function(def) {

  ///
  /// create parser and define options
  ///
  var parser = new cmdopt.Parser();
  def.parser = parser;
  parser.option("-h, --help",      "show help");
  parser.option("-v  #version",    "print version");
  parser.option("-f, --file=FILE", "read file");
  parser.option("-m, --mode=MODE", "set mode ('verbose' or 'quiet')")
        .validation(function(val) {
                        if (val != 'verbose' && val != 'quiet')
                            return "'verbose' or 'quiet' expected.";
                        return null;
                    });
  parser.option("    --quiet", "quiet mode (same as --mode=quiet)")
        .action(function(val, opts) { opts.mode = "quiet"; });
  parser.option("-i, --indent[=N]", "indent width (default 2)")
        .validation(function(val) {
                        if (val !== true && ! val.match(/^\d+$/))
                            return "integer required.";
                        return null;
                    })
        .action(function(val, opts) {
                    if (val == true) val = '2';
                    opts.indent = parseInt(val);
                });
  parser.option("-D  #debug", null);   /// private option: not displayed in help


  ///
  /// default values
  ///
  def.defaults = {file: 'config.json', mode: 'verbose', indent: 0};


  ///
  /// main program
  ///
  def.run = function run() {

    /// parse command-line options
    var args = process.argv.slice(2);
    var opts = this.parser.parse(args, this.defaults); /// throws cmdopt.ParseError

    /// help message
    if (opts.help) {
      var command = require('path').basename(__filename);
      process.stdout.write("Usage: " + command + " [options] [args...]\n"
                           + parser.help());  // or parser.help(20, "  ");
      return 0;
    }

    /// version
    if (opts.version) {
      process.stdout.write(cmdopt.VERSION + "\n");
      return 0;
    }

    /// indent
    if (opts.indent) {
      opts.indent = opts.indent == true ? 2 : parseInt(opts.indent);
    }

    /// do something
    console.log("** args");
    console.log(args);
    console.log("** opts");
    console.log(opts);
    return 0;
  };


  ///
  /// entry point
  ///
  def.main = function main() {
    try {
      var status_code = this.run();
      process.exit(status_code);
    }
    catch (ex) {
      /// if something wrong on command-line option, report as error.
      if (ex instanceof cmdopt.ParseError) {
        var command = require('path').basename(__filename);
        process.stderr.write(command + ": " + ex.message + "\n");
        process.exit(1);
      }
      throw ex;
    }
  };


})(MainApp.prototype);


if (require.main === module) {
  new MainApp().main();
}
