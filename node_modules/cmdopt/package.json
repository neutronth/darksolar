{
  "name": "cmdopt",
  "description": "command option parser for Node.js",
  "version": "0.2.0",
  "tags": [
    "command-option",
    "cli",
    "getopt"
  ],
  "homepage": "https://bitbucket.org/kwatch/cmdopt/wiki/Cmdopt.js",
  "author": {
    "name": "Makoto Kuwata",
    "email": "kwa@kuwata-lab.com"
  },
  "main": "./cmdopt.js",
  "directories": {
    "test": "./test"
  },
  "scripts": {
    "test": "node test/cmdopt_test.js"
  },
  "engines": {
    "node": "*"
  },
  "dependencies": {},
  "devDependencies": {
    "picotest": "0.2.X"
  },
  "readme": "================\ncmdopt.js README\n================\n\nRelease: 0.2.0\n\n\nAbout\n-----\n\ncmdopt.js is command-line option parser for Node.js.\n\n\nInstall\n-------\n\n::\n\n\t$ npm install cmdopt\n\n\nUsage\n-----\n\nExample::\n\n\t/// define option, desc, and action\n\tvar cmdopt = require('cmdopt');\n\tvar parser = new cmdopt.Parser();\n\tparser.option(\"-h, --help\",      \"show help\");\n\tparser.option(\"-f, --file=FILE\", \"read file\");\n\t/// parse args\n\tvar args = process.argv.slice(2);\n\tvar defaults = {file: 'config.json'};\n\ttry {\n\t  var opts = parser.parse(args, defaults);\n\t  console.log(opts);\n\t  if (opts.help) console.log(parser.help());\n\t} catch (ex) {\n\t  if (ex instanceof cmdopt.ParseError) {\n\t    process.stderr.write(ex.message + \"\\n\");\n\t    process.exit(1);\n\t  }\n\t  throw ex;\n\t}\n\nMore example::\n\n\t/// no argument\n\tparser.option(\"-h\",         \"show help\");\n\tparser.option(\"--help\",     \"show help\");\n\tparser.option(\"-h, --help\", \"show help\");\n\t/// required argument\n\tparser.option(\"-f FILE\",         \"read file\");\n\tparser.option(\"--file=FILE\",     \"read file\");\n\tparser.option(\"-f, --file=FILE\", \"read file\");\n\t/// optional argument\n\tparser.option(\"-i[N]\",            \"indent width\");\n\tparser.option(\"--indent[=N]\",     \"indent width\");\n\tparser.option(\"-i, --indent[=N]\", \"indent width\");\n\nValidation::\n\n\tparser.option(\"-m, --mode=MODE\", \"set mode\")\n\t      .validation(function(val) {\n\t           if (val != 'verbose' && val != 'quiet')\n\t               return \"'verbose' or 'quiet' expected.\";\n\t           return null;\n\t       });\n\tparser.option(\"-i, --indent[=N]\", \"indent width (default 2)\")\n\t      .validation(function(val) {\n\t           if (val !== true && ! val.match(/^\\d+$/))\n\t               return \"integer required.\";\n\t           return null;\n\t       });\n\nAction::\n\n\t/// change default action\n\tparser.option(\"--verbose\", \"quiet mode\")\n\t      .action(function(opts, val) { opts.mode = \"verbose\"; });\n\tparser.option(\"--quiet\", \"quiet mode\")\n\t      .action(function(opts, val) { opts.mode = \"quiet\"; });\n\t\n\t/// The following definitions...\n\tparser.option(\"-h, --help\",      \"show help\");\n\tparser.option(\"-f, --file=FILE\", \"read file\");\n\t/// are equivarent to:\n\tparser.option(\"-h, --help\",      \"show help\")\n\t      .action(function(val) { this.help = true; });\n\tparser.option(\"-f, --file=FILE\", \"read file\")\n\t      .action(function(val) { this.file = val; });\n\nMultiple option::\n\n\t/// set custom action function to store values into array\n\tparser.option(\"-I path  #paths\", \"include path (multiple OK)\")\n\t      .action(function(val, opts) {\n\t           if (! opts.paths) opts.paths = [];\n\t           opts.paths.push(val);\n\t       });\n\t///\n\tvar opts = parser.parse([\"-Ipath1\", \"-Ipath2\", \"-Ipath3\"]);\n\tassert.deepEqual(opts.paths, [\"path1\", \"path2\", \"path3\"]);\n\nAttrubite name::\n\n\t/// usually, long name or sort name is used as options' attribute name.\n\tparser.option(\"-h, --help\", \"show help\");\n\topts = parser.parse([\"-h\"]);\n\tassert.ok(opts.help == true);    // attr name == long name\n\tparser.option(\"-h\", \"show help\");\n\topts = parser.parse([\"-h\"]);\n\tassert.ok(opts.h == true);       // attr name == short name\n\t/// it is possible to specify attribute name by '#name'.\n\t/// this is very helpful when you want not to use long name.\n\tparser.option(\"-h  #help\", \"show help\");\n\topts = parser.parse([\"-h\"]);\n\tassert.ok(opts.help == true);    // not opts.h\n\nHelp message::\n\n\tconsole.log(\"Usage: command [options] [file...]\\n\"\n\t            + parser.help());    // or parser.help(20, \"  \");\n\nPrivate option::\n\n\tparser.option(\"-D, --debug\", null); // private option: no description\n\tvar s = parser.help();\n\tassert.ok(! s.match(/--debug/));    // not included in help message\n\n\nHistory\n-------\n\nRelease 0.2.0\n~~~~~~~~~~~~~\n\n* No compatibility with 0.1.0.\n* Add 'cmdopt.Parser.option()' method.\n* Remove 'cmdopt.Parser.add()' method.\n* Rename 'action' to 'handler'.\n* Change arguments order of handler function.\n\nRelease 0.1.0\n~~~~~~~~~~~~~\n\n* Rewrited from scratch.\n* No compatibility with 0.0.1.\n* Add 'examples/hello.js'\n\nRelease 0.0.1\n~~~~~~~~~~~~~\n\n* Public released\n\n\nLicense\n-------\n\n$License: MIT License $\n\n\nCopyright\n---------\n\n$Copyright: copyright(c) 2011 kuwata-lab.com all rights reserved $\n",
  "readmeFilename": "README.txt",
  "_id": "cmdopt@0.2.0",
  "dist": {
    "shasum": "d4fd356235a148c58ee240c9871d7db3f55b4cae"
  },
  "_from": "cmdopt@0.2.0",
  "_resolved": "https://registry.npmjs.org/cmdopt/-/cmdopt-0.2.0.tgz"
}
