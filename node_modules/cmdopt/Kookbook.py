###
### $Release: 0.2.0 $
### $Copyright: copyright(c) 2011 kuwata-lab.com all rights reserved $
### $License: MIT License $
###
from __future__ import with_statement

import sys, os, re
from kook.utils import glob2


kookbook.default = 'test'


release = prop('release', '0.2.0')


vs_home = os.getenv('VS_PATH').split(':')[0]
nodejs_executables = [
    ("0.4", "%s/node/0.4.11/bin/node" % vs_home),
    ("0.5", "%s/node/0.5.10/bin/node" % vs_home),
    ("0.6", "%s/node/0.6.3/bin/node"  % vs_home),
]


class test(Category):

    @recipe
    def default(c):
        """do test"""
        for fname in glob2('test/**/*_test.js'):
            system_f(c%"node $(fname)")

    @recipe
    def all(c):
        """do test on Node.js 0.4, 0.5, and 0.6"""
        for ver, bin in nodejs_executables:
            print("******************** Node.js %s ********************" % ver)
            for fname in glob2('test/**/*_test.js'):
                system_f(c%"$(bin) $(fname)")


kookbook.load('@kook/books/clean.py')
CLEAN.extend(('README.html', 'dist'))


target_files = [
    'README.txt', 'MIT-LICENSE', 'Kookbook.py', 'package.json', '.gitignore',
    'cmdopt.js', 'test/**/*.js', 'examples/**/*',
]


class pkg(Category):

    @recipe
    @ingreds('clean')
    def default(c):
        """show steps to release"""
        print("""
bash> git status
bash> git commit -a
bash> kk test:all
bash> kk pkg:check
bash> git co -b js-X.X  # or git co js-X.X
bash> vi README.txt     # update history
bash> vi Kookbook.py    # increment release number
bash> git ci -am "release preparation for X.X.X"
bash> git tag js-X.X.X
bash> kk pkg:dist
bash> #(cd dist/X.X.X; kk test:all)
bash> (cd dist/X.X.X; npm publish)
bash> (cd wiki; git commit -a; git push)
"""[1:])

    #@recipe
    #@ingreds('wiki/Cmdopt.js.wiki', 'clean')
    #def task_edit(c, *args):
    #    replacer = [
    #        (r'\$(Release): .*? \$', c%'$\\1: $(release) $'),
    #        (r'\$(Release)\$', release)
    #        #(r'\$(License): .*? \$', c%'$\\1: $(license) $'),
    #        #(r'\$(Copyright): .*? \$', c%'$\\1: $(copyright) $'),
    #    ]
    #    edit(target_files, by=replacer)

    @recipe
    @ingreds('wiki/Cmdopt.js.wiki', 'clean')
    def dist(c, *args):
        """create 'dist' directory and copy files into it"""
        dir = c%'dist/$(release)'
        rm_rf(dir)
        mkdir_p(dir)
        files = ['README.txt', 'MIT-LICENSE', 'Kookbook.py', 'package.json', '.gitignore']
        store(files, dir)
        store('cmdopt.js', 'test/**/*_test.js', 'examples/**/*', dir)
        #
        replacer = [
            (r'\$(Release):.*?\$', c%'$\\1: $(release) $'),
            (r'\$(Release)\$', release)
            #(r'\$(License): .*? \$', c%'$\\1: $(license) $'),
            #(r'\$(Copyright): .*? \$', c%'$\\1: $(copyright) $'),
        ]
        edit(c%"$(dir)/**/*", c.ingred, by=replacer)
        #
        system(c%"find $(dir)")

    @recipe
    def check(c):
        code = r"""
'use strict';
var fs = require("fs");
var s = fs.readFileSync('package.json', 'utf-8');
var json = JSON.parse(s);
//console.log(json);
"""[1:]
        with open("_check.js", "w") as f: f.write(code)
        try:
            system("node _check.js");
        finally:
            os.unlink("_check.js")


###
### wiki
###
kookbook.load('./books/wiki.py');


@recipe('README.html')
def file_README_html(c):
    system("rst2html.py README.txt > README.html")
    #system("rst2html.py --strip-elements-with-class='section' README.txt > README.html")
    #system("rst2html.py --strip-class='literal-block' README.txt > README.html")
